syntax = "proto3";

package Cotars.GameProtoCard;

enum PokeCardType {
    POKE_CARD_TYPE_SPADE = 0;
    POKE_CARD_TYPE_HEART = 1;
    POKE_CARD_TYPE_DIAMOND = 2;
    POKE_CARD_TYPE_CLUB = 3;
    POKE_CARD_TYPE_KING = 4;
}

enum PokeCard {
    POKE_CARD_BLANK = 0;
    POKE_CARD_SPADE_A = 1;
    POKE_CARD_SPADE_2 = 2;
    POKE_CARD_SPADE_3 = 3;
    POKE_CARD_SPADE_4 = 4;
    POKE_CARD_SPADE_5 = 5;
    POKE_CARD_SPADE_6 = 6;
    POKE_CARD_SPADE_7 = 7;
    POKE_CARD_SPADE_8 = 8;
    POKE_CARD_SPADE_9 = 9;
    POKE_CARD_SPADE_10 = 10;
    POKE_CARD_SPADE_J = 11;
    POKE_CARD_SPADE_Q = 12;
    POKE_CARD_SPADE_K = 13;
    POKE_CARD_HEART_A = 17;
    POKE_CARD_HEART_2 = 18;
    POKE_CARD_HEART_3 = 19;
    POKE_CARD_HEART_4 = 20;
    POKE_CARD_HEART_5 = 21;
    POKE_CARD_HEART_6 = 22;
    POKE_CARD_HEART_7 = 23;
    POKE_CARD_HEART_8 = 24;
    POKE_CARD_HEART_9 = 25;
    POKE_CARD_HEART_10 = 26;
    POKE_CARD_HEART_J = 27;
    POKE_CARD_HEART_Q = 28;
    POKE_CARD_HEART_K = 29;
    POKE_CARD_DIAMOND_A = 33;
    POKE_CARD_DIAMOND_2 = 34;
    POKE_CARD_DIAMOND_3 = 35;
    POKE_CARD_DIAMOND_4 = 36;
    POKE_CARD_DIAMOND_5 = 37;
    POKE_CARD_DIAMOND_6 = 38;
    POKE_CARD_DIAMOND_7 = 39;
    POKE_CARD_DIAMOND_8 = 40;
    POKE_CARD_DIAMOND_9 = 41;
    POKE_CARD_DIAMOND_10 = 42;
    POKE_CARD_DIAMOND_J = 43;
    POKE_CARD_DIAMOND_Q = 44;
    POKE_CARD_DIAMOND_K = 45;
    POKE_CARD_CLUB_A = 49;
    POKE_CARD_CLUB_2 = 50;
    POKE_CARD_CLUB_3 = 51;
    POKE_CARD_CLUB_4 = 52;
    POKE_CARD_CLUB_5 = 53;
    POKE_CARD_CLUB_6 = 54;
    POKE_CARD_CLUB_7 = 55;
    POKE_CARD_CLUB_8 = 56;
    POKE_CARD_CLUB_9 = 57;
    POKE_CARD_CLUB_10 = 58;
    POKE_CARD_CLUB_J = 59;
    POKE_CARD_CLUB_Q = 60;
    POKE_CARD_CLUB_K = 61;
    POKE_CARD_QUEEN = 65;
    POKE_CARD_KING = 66;
}

enum MJCardType {
    MJCARD_TYPE_WANG = 0;
    MJCARD_TYPE_TONG = 1;
    MJCARD_TYPE_TIAO = 2;
    MJCARD_TYPE_FENG = 3;
    MJCARD_TYPE_JIAN = 4;
    MJCARD_TYPE_HUA = 5;
}

enum MJCard {
    MJCARD_NIL = 0;
    MJCARD_1_WANG = 1;
    MJCARD_2_WANG = 2;
    MJCARD_3_WANG = 3;
    MJCARD_4_WANG = 4;
    MJCARD_5_WANG = 5;
    MJCARD_6_WANG = 6;
    MJCARD_7_WANG = 7;
    MJCARD_8_WANG = 8;
    MJCARD_9_WANG = 9;
    MJCARD_1_TONG = 17;
    MJCARD_2_TONG = 18;
    MJCARD_3_TONG = 19;
    MJCARD_4_TONG = 20;
    MJCARD_5_TONG = 21;
    MJCARD_6_TONG = 22;
    MJCARD_7_TONG = 23;
    MJCARD_8_TONG = 24;
    MJCARD_9_TONG = 25;
    MJCARD_1_TIAO = 33;
    MJCARD_2_TIAO = 34;
    MJCARD_3_TIAO = 35;
    MJCARD_4_TIAO = 36;
    MJCARD_5_TIAO = 37;
    MJCARD_6_TIAO = 38;
    MJCARD_7_TIAO = 39;
    MJCARD_8_TIAO = 40;
    MJCARD_9_TIAO = 41;
    MJCARD_DONG_FENG = 49;
    MJCARD_NAN_FENG = 50;
    MJCARD_XI_FENG = 51;
    MJCARD_BEI_FENG = 52;
    MJCARD_ZHONG_JIAN = 65;
    MJCARD_FA_JIAN = 66;
    MJCARD_BAI_JIAN = 67;
    MJCARD_CHUN_HUA = 81;
    MJCARD_XIA_HUA = 82;
    MJCARD_QIU_HUA = 83;
    MJCARD_DONG_HUA = 84;
    MJCARD_MEI_HUA = 85;
    MJCARD_LAN_HUA = 86;
    MJCARD_ZHU_HUA = 87;
    MJCARD_JU_HUA = 88;
}

enum TableStatus {
    TABLE_STATUS_IDLE = 0;
    TABLE_STATUS_WAIT = 1;
    TABLE_STATUS_START = 2;
    TABLE_STATUS_END = 3;
}

enum TableAction {
    TABLE_ACTION_KEEP = 0;
    TABLE_ACTION_SITDOWN = 1;
    TABLE_ACTION_STANDUP = 2;
    TABLE_ACTION_READY = 3;
    TABLE_ACTION_START = 4;
    TABLE_ACTION_LEAVE = 5;
    TABLE_ACTION_ENDVOTE = 6;
}

enum GameStatus {
    GAME_STATUS_IDLE = 0;
    GAME_STATUS_READY = 1;
    GAME_STATUS_START = 2;
}

enum PlayerStatus {
    PLAYER_STATUS_IDLE = 0;
    PLAYER_STATUS_READY = 1;
    PLAYER_STATUS_START = 2;
}

// message UserInfo {
//     string nickname = 1;
//     string portrait = 2;
//     int32 level = 3;
//     int32 exp = 4;
//     int32 vipLevel = 5;
//     string extends = 6;
// }

message PlayerInfo {
    PlayerStatus status = 1;
    uint32 uid = 2;
    uint32 seatid = 3;
    int32 score = 4;
    // UserInfo info = 5;
}

message TableInfo {
    uint32 id = 1;
    TableStatus status = 2;
    repeated PlayerInfo players = 3;
    uint32 baseScore = 4;
    uint32 sits = 5;//座位数
    uint32 rounds = 6;//共几轮
    uint32 subRounds = 7;//每轮局数
    uint32 nowRound = 8;//当前第几轮
    uint32 nowSubRound = 9;//每轮第几局
    uint32 ownerUid = 10;//房间拥有者
}

message TableMatched {
    uint32 id = 1;
    string token = 2;
}

//桌子匹配到的通知 server -> client
message TableMatchedNtf {
    repeated TableMatched matchs = 1;
}

//玩家请求加入桌子 client->server
message TableJoinReq {
    uint32 id = 1;
    string token = 2;
}

//玩家请求加入桌子 server -> client
message TableJoinResp {
}

//玩家进入桌子通知 server -> client
message TableJoinNtf {
    uint32 id = 1;
    PlayerInfo player = 2;
}

//玩家桌子操作 client->server
message TableActionReq {
    uint32 id = 1;
    uint32 seatid = 2;
    repeated uint32 targetSeatids = 3;
    TableAction action = 4;
}

//玩家桌子操作 server->client
message TableActionResp {
}

//玩家桌子操作通知 server->client
message TableActionNtf {
    uint32 id = 1;
    uint32 seatid = 2;
    TableAction action = 3;
    PlayerInfo player = 4;
}

message GameAction {
    repeated uint32 action = 1;
    repeated uint32 cards = 2;
}

message GameActionReq {
    uint32 tableid = 1;
    uint32 seatid = 2;
    repeated uint32 action = 3;
}

message GameActionResp {
}

message GameActionNty {
    uint32 tableid = 1;
    uint32 seatid = 2;
    uint32 timeout = 3;
    repeated GameAction actions = 4;
}

message GameCardMoveNtf {
    uint32 tableid = 1;
    uint32 fromSeatid = 2;
    uint32 toSeatid = 3;
    uint32 areaid = 4;
    uint32 action = 5;
    uint32 count = 6;
    repeated uint32 cards = 7;
}

message CardSet {
    repeated uint32 cards = 1;
    uint32 action = 2;
    uint32 fromSeatid = 3;
    uint32 count = 4;
}

message GamePlayer {
    uint32 uid = 1;
    uint32 seatid = 2;
    repeated CardSet cardSets = 3;
    uint32 handCount = 4;
}

message GameInfoNtf {
    repeated GamePlayer players = 1;
    uint32 lastSeatid = 2;
    uint32 btnSeatid = 3;
    uint32 leftCard = 4;
    uint32 baseScore = 5;
}